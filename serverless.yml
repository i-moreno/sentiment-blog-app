# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: improvedchickadee
service: blog-sentiment-app

custom:
  stage: ${opt:stage, 'dev'}
  imageBucket: blogpost-images-bucket-${self:custom.stage}
  pythonRequirements:
    # When set to true, the plugin runs pip install inside a Docker container that mimics the AWS Lambda environment. 
    # This is especially useful if your local environment is different 
    # (for example, macOS or Windows) to ensure binary packages compile correctly for Lambda.
    dockerizePip: true
    # This option removes unnecessary files (like tests, documentation, and other non-essential data) from the installed packages. 
    # It helps reduce the final deployment package size.
    slim: true
    # This tells the plugin not to create a separate Lambda layer for your dependencies.
    # Instead, it bundles them directly into your functionâ€™s deployment package.
    # If you set this to true, your dependencies would be packaged as a separate layer, which can be reused by multiple functions.
    layer: false

provider:
  name: aws
  runtime: python3.10
  region: us-east-1  
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource:
        - "arn:aws:s3:::${self:custom.imageBucket}/*"
  ecr:
    images:
      blog-api:
        uri: 360367874658.dkr.ecr.us-east-1.amazonaws.com/serverless-blog-sentiment-app-dev:1740684472

functions:
  app:
    name: blog-sentiment-app-v3
    # image:
    #   name: blog-api
    handler: app.main.handler
    events:
      - httpApi:
          path: /
          method: GET
      - httpApi:
          path: /posts
          method: GET
      - httpApi:
          path: /post
          method: POST
      - httpApi:
          path: /post/{post_id}
          method: PATCH
      - httpApi:
          path: /post/{post_id}
          method: DELETE
      - httpApi:
          path: /post/restore/{post_id}
          method: PATCH
      - httpApi:
          path: /comment/{post_id}
          method: POST
      - httpApi:
          path: /comment/{post_id}
          method: GET
      - httpApi:
          path: /comment/{post_id}/{comment_id}
          method: PATCH
      - httpApi:
          path: /comment/{post_id}/{comment_id}
          method: DELETE
      - httpApi:
          path: /sentiment/{post_id}
          method: POST
      - httpApi:
          path: /sentiment/{post_id}/{sentiment_id}
          method: PATCH
      - httpApi:
          path: /post/{post_id}/image
          method: POST

  generateThumbnail:
    handler: app.handlers.generate_thumbnail.generate_thumbnail
    events:
    - s3:
        bucket: ${self:custom.imageBucket}
        event: s3:ObjectCreated:*
        rules:
          - suffix: .jpg
    - s3:
        bucket: ${self:custom.imageBucket}
        event: s3:ObjectCreated:*
        rules:
          - suffix: .jpeg
    - s3:
        bucket: ${self:custom.imageBucket}
        event: s3:ObjectCreated:*
        rules:
          - suffix: .png

resources:
  Resources:
    BlogAppTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: BlogAppTable
        BillingMode: PAY_PER_REQUEST

        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE

        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

plugins:
  - serverless-offline
  - serverless-python-requirements
